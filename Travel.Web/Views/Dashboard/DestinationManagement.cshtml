﻿@{
    ViewData["Title"] = "Destination Management";
    var sectionTitle = ViewData["SectionTitle"] ?? "Manage Destinations";
    var token = Context.Session.GetString("JWToken");
}

@section Styles {
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet" />
    <style>
        body {
            font-family: 'Roboto', sans-serif;
        }

        .landing-page {
            position: relative;
            background: url('/images/backgroundLandingPage.jpg') no-repeat center center fixed;
            background-size: cover;
            min-height: 100vh;
            padding-top: 40px;
        }

        .overlay {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            width: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 0;
        }

        .dashboard-content {
            position: relative;
            z-index: 1;
            color: #fff;
            text-align: center;
        }

            .dashboard-content h2 {
                font-size: 2.5rem;
                margin-bottom: 30px;
                text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
            }

        .dashboard-card {
            background-color: rgba(255, 255, 255, 0.9);
            color: #333;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        .destination-actions button {
            margin-left: 10px;
        }
    </style>
}

<div class="landing-page">
    <div class="overlay"></div>

    <div class="container dashboard-content">
        <h2>@sectionTitle</h2>
        <div class="dashboard-card">
            <button class="btn btn-success mb-3" onclick="showAddForm()">+ Add Destination</button>

            <div class="table-responsive">
                <div class="table-scroll-wrapper">
                    <table class="table table-bordered table-striped">
                        <thead class="table-light">
                            <tr>
                                <th>Name</th>
                                <th class="d-none d-sm-table-cell">Country</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="destinationTableBody"></tbody>
                    </table>
                </div>
            </div>

            <div id="addEditForm" style="display:none;">
                <h5 id="formTitle">Add Destination</h5>
                <input type="hidden" id="destinationId" />
                <input type="text" id="name" placeholder="Name" class="form-control mb-2" />
                <input type="text" id="country" placeholder="Country" class="form-control mb-2" />
                <button class="btn btn-primary" onclick="submitForm()">Save</button>
                <button class="btn btn-secondary" onclick="hideForm()">Cancel</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const token = localStorage.getItem("jwtToken");

        function loadDestinations() {
            fetch("https://localhost:7172/api/destination", {
                headers: { "Authorization": "Bearer " + token }
            })
            .then(res => res.json())
            .then(data => {
                const tbody = document.getElementById("destinationTableBody");
                tbody.innerHTML = "";
                data.forEach(dest => {
                    tbody.innerHTML += `
                        <tr>
                            <td>${dest.name}</td>
                            <td class="d-none d-sm-table-cell">${dest.country}</td>
                            <td class="destination-actions">
                                <button class="btn btn-sm btn-warning" onclick="editDestination(${dest.id}, '${dest.name}', '${dest.country}')">Edit</button>
                                <button class="btn btn-sm btn-danger" onclick="deleteDestination(${dest.id})">Delete</button>
                            </td>
                        </tr>`;
                });
            });
        }

        function showAddForm() {
            document.getElementById("addEditForm").style.display = "block";
            document.getElementById("formTitle").innerText = "Add Destination";
            ["destinationId", "name", "country"].forEach(id => document.getElementById(id).value = "");
        }

        function editDestination(id, name, country) {
            document.getElementById("addEditForm").style.display = "block";
            document.getElementById("formTitle").innerText = "Edit Destination";
            document.getElementById("destinationId").value = id;
            document.getElementById("name").value = name;
            document.getElementById("country").value = country;
        }

        function hideForm() {
            document.getElementById("addEditForm").style.display = "none";
        }

        function submitForm() {
            const idValue = document.getElementById("destinationId").value;
            const id = parseInt(idValue);
            const name = document.getElementById("name").value;
            const country = document.getElementById("country").value;

            const isEdit = !!idValue;
            const method = isEdit ? "PUT" : "POST";
            const url = isEdit
                ? `https://localhost:7172/api/destination/${id}`
                : "https://localhost:7172/api/destination";

            const payload = isEdit
                ? { id, name, country }
                : { name, country };

            fetch(url, {
                method,
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + token
                },
                body: JSON.stringify(payload)
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {
                        console.error("API error:", err);
                        alert("Failed to save destination.");
                    });
                }
                loadDestinations();
                hideForm();
            })
            .catch(error => {
                console.error("Fetch error:", error);
                alert("An unexpected error occurred.");
            });
        }

        function deleteDestination(id) {
            if (confirm("Are you sure you want to delete this destination?")) {
                fetch(`https://localhost:7172/api/destination/${id}`, {
                    method: "DELETE",
                    headers: {
                        "Authorization": "Bearer " + token
                    }
                }).then(() => loadDestinations());
            }
        }

        document.addEventListener("DOMContentLoaded", loadDestinations);
    </script>
}