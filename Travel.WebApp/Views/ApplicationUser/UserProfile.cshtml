@model Travel.Web.Models.ApplicationUser

﻿@{
    ViewData["Title"] = "User Profile";
}

<h2 class="text-center my-4">User Profile</h2>

<div class="container d-flex justify-content-center align-items-start">
    <div class="card shadow p-4" style="width: 100%; max-width: 500px;">
        <form id="profileForm">
            <input type="hidden" id="Id" />

            <div class="mb-2">
                <label asp-for="UserName" class="form-label small"></label>
                <input asp-for="UserName" class="form-control form-control-sm" disabled/>
                <span asp-validation-for="UserName" class="text-danger small"></span>
            </div>
            <div class="mb-2">
                <label asp-for="Email" class="form-label small"></label>
                <input asp-for="Email" class="form-control form-control-sm" />
                <span asp-validation-for="Email" class="text-danger small"></span>
            </div>
            <div class="mb-2">
                <label asp-for="FirstName" class="form-label small"></label>
                <input asp-for="FirstName" class="form-control form-control-sm" />
                <span asp-validation-for="FirstName" class="text-danger small"></span>
            </div>
            <div class="mb-2">
                <label asp-for="LastName" class="form-label small"></label>
                <input asp-for="LastName" class="form-control form-control-sm" />
                <span asp-validation-for="LastName" class="text-danger small"></span>
            </div>
            <div class="mb-2">
                <label asp-for="PhoneNumber" class="form-label small"></label>
                <input asp-for="PhoneNumber" class="form-control form-control-sm" />
                <span asp-validation-for="PhoneNumber" class="text-danger small"></span>
            </div>
            <div class="mb-2">
                <label asp-for="Password" class="form-label small"></label>
                <input asp-for="Password" class="form-control form-control-sm" />
                <span asp-validation-for="Password" class="text-danger small"></span>
            </div>
            <div class="form-check mb-2">
                <input type="checkbox" name="IsAdmin" value="true" class="form-check-input" id="isAdminCheckbox" />
                <input type="hidden" name="IsAdmin" value="false" />
                <label class="form-check-label" for="isAdminCheckbox">Is Admin</label>
            </div>
            <button type="button" class="btn btn-success w-100" onclick="saveProfile()">Save</button>
        </form>
    </div>
</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        const token = localStorage.getItem("jwtToken");
        console.log("Token from localStorage:", token);

         function loadProfile() {
            fetch("https://localhost:7172/api/ApplicationUser/me", {
                method: "GET",
                headers: { "Authorization": "Bearer " + token }
            })
            .then(res => {
                if (!res.ok) {
                    throw new Error(`HTTP error! status: ${res.status}`);
                }
                return res.json();
            })
            .then(data => {
                console.log("Fetched user data:", data);

                // --- CORRECTED MAPPING ---
                // Added the 'isAdmin' mapping to the object
                const inputMappings = {
                    'id': 'Id',
                    'userName': 'UserName',
                    'email': 'Email',
                    'firstName': 'FirstName',
                    'lastName': 'LastName',
                    'phoneNumber': 'PhoneNumber',
                    'isAdmin': 'isAdminCheckbox' // NEW: Mapping for the checkbox
                };

                for (const jsonKey in inputMappings) {
                    const elementId = inputMappings[jsonKey];
                    const input = document.getElementById(elementId);

                    if (input && data.hasOwnProperty(jsonKey)) {
                        // Special handling for checkboxes
                        if (input.type === 'checkbox') {
                            // The `checked` property expects a boolean (true/false)
                            input.checked = data[jsonKey];
                            console.log(`Mapped '${jsonKey}' to checkbox with ID '${elementId}' and set checked: '${data[jsonKey]}'`);
                        } else {
                            // Standard value setting for other inputs
                            input.value = data[jsonKey];
                            console.log(`Mapped '${jsonKey}' to input with ID '${elementId}' and set value: '${data[jsonKey]}'`);
                        }
                    } else {
                        console.warn(`No input element found with ID '${elementId}' or key '${jsonKey}' missing in data.`);
                    }
                }
            })
            .catch(error => {
                console.error("Error fetching user profile:", error);
                alert("Failed to load user profile. Please check the console for details.");
            });
        }


        function saveProfile() {
            // Correcting the IDs to match the PascalCase generated by asp-for
            const updatedUser = {
                id: parseInt(document.getElementById("Id").value), // Don't forget the ID
                userName: document.getElementById("UserName").value,
                email: document.getElementById("Email").value,
                firstName: document.getElementById("FirstName").value,
                lastName: document.getElementById("LastName").value,
                phoneNumber: document.getElementById("PhoneNumber").value,
                password: document.getElementById("Password").value,
                isAdmin: document.getElementById("isAdminCheckbox").checked
            };

            console.log("Sending updated user data:", updatedUser);

            try {
                fetch("https://localhost:7172/api/ApplicationUser/me", {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": "Bearer " + token
                    },
                    body: JSON.stringify(updatedUser)
                })
                .then(res => {
                    if (res.ok) {
                        alert("Profile updated successfully!");
                    } else {
                        res.text().then(text => {
                            console.error("Update failed with response:", text);
                            alert("Update failed! See console for details.");
                        });
                    }
                })
                .catch(error => {
                    console.error("An error occurred during the update:", error);
                    alert("An unexpected error occurred. Please try again.");
                });
            } catch (e) {
                console.error("Error creating updatedUser object:", e);
                alert("Failed to prepare data for saving. Check console.");
            }
        }

        document.addEventListener("DOMContentLoaded", loadProfile);
    </script>
}