﻿@{
    ViewData["Title"] = "Destination Management";
    var sectionTitle = ViewData["SectionTitle"] ?? "Manage Destinations";
    var token = Context.Session.GetString("JWToken");
}


<div class="landing-page">
    <div class="overlay"></div>

    <div class="container dashboard-content">
        <div class="dashboard-card">
            <button class="btn btn-success mb-3" onclick="showAddForm()">+ Add Destination</button>

            <div class="table-responsive">
                <div class="table-scroll-wrapper">
                    <table class="table table-bordered table-striped">
                        <thead class="table-light">
                            <tr>
                                <th>Name</th>
                                <th class="d-none d-sm-table-cell">Country</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="destinationTableBody"></tbody>
                    </table>
                </div>
            </div>

            <div id="addEditForm" class="modal" style=" display:none;">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <h5 id="formTitle">Add Destination</h5>
                        <input type="hidden" id="destinationId" />
                        <input type="text" id="name" placeholder="Name" class="form-control mb-2" />
                        <input type="text" id="country" placeholder="Country" class="form-control mb-2" />
                        <button class="btn btn-primary" onclick="submitForm()">Save</button>
                        <button class="btn btn-secondary" onclick="hideForm()">Cancel</button>
                    </<div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const token = localStorage.getItem("jwtToken");

    /*
        * Loads all destinations from the backend API using a GET request.
        * Adds the JWT token to the request headers for authentication.
        * Once the data is retrieved and parsed as JSON:
        *   - Clears any existing table rows inside the <tbody> with id="destinationTableBody"
        *   - Iterates over the list of destinations
        *   - Dynamically builds table rows (<tr>) with:
        *       - Name and Country of the destination
        *       - "Edit" and "Delete" buttons that call respective functions with destination ID and data
        * The resulting HTML is injected into the DOM to display the destination list.
        */
        function loadDestinations() {
            fetch("https://localhost:7172/api/destination", {
                headers: { "Authorization": "Bearer " + token }
            })
            .then(res => res.json())
            .then(data => {
                const tbody = document.getElementById("destinationTableBody");
                tbody.innerHTML = "";
                data.forEach(dest => {
                    tbody.innerHTML += `
                        <tr>
                            <td>${dest.name}</td>
                            <td class="d-none d-sm-table-cell">${dest.country}</td>
                            <td class="destination-actions">
                                <button class="btn btn-sm btn-warning" onclick="editDestination(${dest.id}, '${dest.name}', '${dest.country}')">Edit</button>
                                <button class="btn btn-sm btn-danger" onclick="deleteDestination(${dest.id})">Delete</button>
                            </td>
                        </tr>`;
                });
            });
        }

        /*
        * Displays the Add Destination form inside the modal.
        * Clears any previously entered values and updates the modal title.
        */
        function showAddForm() {
            document.getElementById("addEditForm").style.display = "block";
            document.getElementById("formTitle").innerText = "Add Destination";
            ["destinationId", "name", "country"].forEach(id => document.getElementById(id).value = "");
        }

        /*
        * Prepares the modal form for editing an existing destination.
        * Populates the form fields with the selected destination's data and updates the modal title.
        */
        function editDestination(id, name, country) {
            document.getElementById("addEditForm").style.display = "block";
            document.getElementById("formTitle").innerText = "Edit Destination";
            document.getElementById("destinationId").value = id;
            document.getElementById("name").value = name;
            document.getElementById("country").value = country;
        }

        /*
        * Hides the Add/Edit form modal without saving any changes.
        */
        function hideForm() {
            document.getElementById("addEditForm").style.display = "none";
        }

        /*
        * Handles form submission for both adding and editing a destination.
        * Determines the operation mode (POST or PUT) based on presence of destination ID.
        * Sends the data as JSON to the backend API.
        * After a successful response:
        *   - Reloads the destination list
        *   - Hides the form modal
        * If the response is not OK, displays an error message.
        */
        function submitForm() {
            const idValue = document.getElementById("destinationId").value;
            const id = parseInt(idValue);
            const name = document.getElementById("name").value;
            const country = document.getElementById("country").value;

            const isEdit = !!idValue;
            const method = isEdit ? "PUT" : "POST";
            const url = isEdit
                ? `https://localhost:7172/api/destination/${id}`
                : "https://localhost:7172/api/destination";


            const payload = isEdit
                ? { id, name, country }
                : { name, country };

            fetch(url, {
                method,
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + token
                },
                body: JSON.stringify(payload)
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {
                        console.error("API error:", err);
                        alert("Destination already exist");
                    });
                } else {
                   alert("Destination is added.");
                }
                loadDestinations();
                hideForm();
            })
            .catch(error => {
                console.error("Fetch error:", error);
                alert("An unexpected error occurred.");
            });
        }


        /*
        * Deletes a destination after user confirmation.
        * Sends a DELETE request to the backend API using the destination's ID.
        * Refreshes the destination list if successful.
        */
        function deleteDestination(id) {
            if (confirm("Are you sure you want to delete this destination?")) {
                fetch(`https://localhost:7172/api/destination/${id}`, {
                    method: "DELETE",
                    headers: {
                        "Authorization": "Bearer " + token
                    }
                }).then(() => loadDestinations());
            }
        }

        /*
        * Automatically triggers when the DOM is fully loaded.
        * Loads and displays the destination list by calling loadDestinations().
        */
        document.addEventListener("DOMContentLoaded", loadDestinations);
    </script>
}